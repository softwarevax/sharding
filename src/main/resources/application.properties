
spring.main.allow-bean-definition-overriding=true

# 配置真实数据源
spring.shardingsphere.datasource.names=ds0,ds1
spring.shardingsphere.props.sql.show=true
spring.shardingsphere.props.executor.size=20
spring.shardingsphere.props.max.connections.size.per.query=1000

# 分库ds0,ds1
# 配置第 1 个数据源
spring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://192.168.159.128:3306/sharding_0?allowMultiQueries=true
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=123456
# 配置第 2 个数据源
spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://192.168.159.128:3306/sharding_1?allowMultiQueries=true
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=123456

# 分表0，1，2，3，4
# 数据源ds0,ds1，表t_user_0...t_user_4，共计10张表（数据源个数 * 表个数）
spring.shardingsphere.sharding.tables.t_user.actual-data-nodes=ds$->{0..1}.t_user_$->{0..4}
# id为雪花算法生成
#spring.shardingsphere.sharding.tables.t_user.key-generator.column=id
#spring.shardingsphere.sharding.tables.t_user.key-generator.type=SNOWFLAKE
# 自定义分片：分表（根据id分表），分表规则自定义（SnoWalkerComplexShardingTB）
spring.shardingsphere.sharding.tables.t_user.table-strategy.complex.sharding-columns=id
spring.shardingsphere.sharding.tables.t_user.table-strategy.complex..algorithm-class-name=com.softwarevax.sharding.sharding.config.SnoWalkerComplexShardingTB
# 自定义分片：分库（根据id分库），分库规则自定义（SnoWalkerComplexShardingDB）
spring.shardingsphere.sharding.tables.t_user.database-strategy.complex.sharding-columns=id
spring.shardingsphere.sharding.tables.t_user.database-strategy.complex.algorithm-class-name=com.softwarevax.sharding.sharding.config.SnoWalkerComplexShardingDB

# 分表0，1，2，3，4
# 数据源ds0,ds1，表t_order_0...t_order_4，共计10张表（数据源个数 * 表个数）
spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=ds$->{0..1}.t_order_$->{0..4}
# id为雪花算法生成
#spring.shardingsphere.sharding.tables.t_order.key-generator.column=id
#spring.shardingsphere.sharding.tables.t_order.key-generator.type=SNOWFLAKE
# 自定义分片：分表（根据user_id分表），分表规则自定义（SnoWalkerComplexShardingTB）
spring.shardingsphere.sharding.tables.t_order.table-strategy.complex.sharding-columns=user_id
spring.shardingsphere.sharding.tables.t_order.table-strategy.complex..algorithm-class-name=com.softwarevax.sharding.sharding.config.SnoWalkerComplexShardingTB
# 自定义分片：分库（根据user_id分库），分库规则自定义（SnoWalkerComplexShardingDB）
spring.shardingsphere.sharding.tables.t_order.database-strategy.complex.sharding-columns=user_id
spring.shardingsphere.sharding.tables.t_order.database-strategy.complex.algorithm-class-name=com.softwarevax.sharding.sharding.config.SnoWalkerComplexShardingDB

# 分表0，1，2，3，4
# 数据源ds0,ds1，表t_order_item_0...t_order_item_4，共计10张表（数据源个数 * 表个数）
spring.shardingsphere.sharding.tables.t_order_item.actual-data-nodes=ds$->{0..1}.t_order_item_$->{0..4}
# id为雪花算法生成
#spring.shardingsphere.sharding.tables.t_order_item.key-generator.column=id
#spring.shardingsphere.sharding.tables.t_order_item.key-generator.type=SNOWFLAKE
# 自定义分片：分表（根据user_id分表），分表规则自定义（SnoWalkerComplexShardingTB）
spring.shardingsphere.sharding.tables.t_order_item.table-strategy.complex.sharding-columns=user_id
spring.shardingsphere.sharding.tables.t_order_item.table-strategy.complex..algorithm-class-name=com.softwarevax.sharding.sharding.config.SnoWalkerComplexShardingTB
# 自定义分片：分库（根据user_id分库），分库规则自定义（SnoWalkerComplexShardingDB）
spring.shardingsphere.sharding.tables.t_order_item.database-strategy.complex.sharding-columns=user_id
spring.shardingsphere.sharding.tables.t_order_item.database-strategy.complex.algorithm-class-name=com.softwarevax.sharding.sharding.config.SnoWalkerComplexShardingDB

# 绑定表
spring.shardingsphere.sharding.binding-tables[0]=t_user,t_order,t_order_item
spring.shardingsphere.sharding.binding-tables[1]=t_order,t_order_item

# mybatis-plus配置
mybatis-plus.mapper-locations=classpath:/*/*Mapper.xml
mybatis-plus.type-aliases-package=com.softwarevax.sharding.sharding.web.entity
mybatis-plus.configuration.map-underscore-to-camel-case=true
mybatis-plus.configuration.cache-enabled=true
mybatis-plus.configuration.lazy-loading-enabled=true
#开启的话，延时加载一个属性时会加载该对象全部属性，否则按需加载属性
mybatis-plus.configuration.multiple-result-sets-enabled=true
mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
pagehelper.helperDialect=mysql
pagehelper.reasonable=true
pagehelper.supportMethodsArguments=true
pagehelper.params=count=countSql